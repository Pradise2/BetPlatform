import React, { useEffect, useState } from 'react';
import { getGameDetailsWithoutWallet, getGameIdCounter } from '../utils/contractFunctions';
import { GamepadIcon, Loader2, Trophy, User, Coins, CheckCircle2, XCircle } from 'lucide-react';

const AllGames: React.FC = () => {
  const [games, setGames] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchGames = async () => {
      setLoading(true);
      const gameIdCounter = await getGameIdCounter();
      const gamePromises = [];

      for (let gameId = 0; gameId <= gameIdCounter; gameId++) {
        gamePromises.push(getGameDetailsWithoutWallet(gameId));
      }

      const gameDetails = await Promise.all(gamePromises);
      setGames(gameDetails);
      setLoading(false);
    };

    fetchGames();
  }, []);

  const truncateAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-3 mb-8">
          <GamepadIcon className="w-8 h-8 text-purple-400" />
          <h2 className="text-3xl font-bold text-white">All Games</h2>
        </div>

        {loading ? (
          <div className="flex items-center justify-center h-64">
            <div className="flex items-center gap-3 text-white">
              <Loader2 className="w-6 h-6 animate-spin" />
              <span className="text-lg">Loading games...</span>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {games.map((game, index) => (
              <div
                key={index}
                className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20 shadow-xl hover:transform hover:scale-[1.02] transition-all"
              >
                {/* Game Header */}
                <div className="flex justify-between items-center mb-4">
                  <div className="flex items-center gap-2">
                    <Trophy className="w-5 h-5 text-yellow-400" />
                    <span className="text-white font-semibold">Game #{index + 1}</span>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    game.isCompleted 
                      ? 'bg-green-500/20 text-green-400'
                      : 'bg-blue-500/20 text-blue-400'
                  }`}>
                    {game.isCompleted ? 'Completed' : 'Active'}
                  </span>
                </div>

                {/* Players */}
                <div className="space-y-3 mb-4">
                  <div className="flex items-center gap-2 text-white/90">
                    <User className="w-4 h-4 text-purple-400" />
                    <span className="text-sm">Player 1:</span>
                    <span className="text-sm font-mono">{truncateAddress(game.player1)}</span>
                    {game.isCompleted && game.didPlayer1Win && (
                      <Trophy className="w-4 h-4 text-yellow-400 ml-auto" />
                    )}
                  </div>
                  <div className="flex items-center gap-2 text-white/90">
                    <User className="w-4 h-4 text-pink-400" />
                    <span className="text-sm">Player 2:</span>
                    <span className="text-sm font-mono">
                      {game.player2 !== '0x0000000000000000000000000000000000000000' 
                        ? truncateAddress(game.player2)
                        : 'Waiting for player...'}
                    </span>
                    {game.isCompleted && !game.didPlayer1Win && (
                      <Trophy className="w-4 h-4 text-yellow-400 ml-auto" />
                    )}
                  </div>
                </div>

                {/* Game Details */}
                <div className="space-y-2 border-t border-white/10 pt-4">
                  <div className="flex items-center gap-2 text-white/80">
                    <Coins className="w-4 h-4 text-purple-400" />
                    <span className="text-sm">Bet Amount:</span>
                    <span className="text-sm font-medium">{game.betAmount}</span>
                  </div>
                  <div className="flex items-center gap-2 text-white/80">
                    <span className="text-xs font-mono break-all">
                      Token: {truncateAddress(game.tokenAddress)}
                    </span>
                  </div>
                  {game.isCompleted && (
                    <div className="flex items-center gap-2 text-white/80 mt-2">
                      <span className="text-sm">Winner:</span>
                      <span className="text-sm font-medium">
                        {game.didPlayer1Win ? 'Player 1' : 'Player 2'}
                      </span>
                    </div>
                  )}
                </div>

                {/* Status Indicators */}
                <div className="flex gap-2 mt-4">
                  <div className="flex items-center gap-1 text-xs">
                    {game.isCompleted ? (
                      <CheckCircle2 className="w-4 h-4 text-green-400" />
                    ) : (
                      <XCircle className="w-4 h-4 text-yellow-400" />
                    )}
                    <span className="text-white/70">
                      {game.isCompleted ? 'Game Completed' : 'Game in Progress'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AllGames;